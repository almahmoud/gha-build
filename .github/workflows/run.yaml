name: Build packages matrix
on:
  workflow_dispatch: {}
  push: {}
  schedule:
    - cron: '*/5 * * * *'

jobs:
  getlistformatrix:
    concurrency:
      group: dispatch
      cancel-in-progress: false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.pkglist }}
    steps:
      - uses: actions/checkout@v3


      - name: Get timestamp for list
        id: uniq
        run: |
          echo "time=$(TZ=EST date '+%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

      - name: Initialize to build list
        id: claim
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git config user.name github-actions
            git config user.email github-actions@github.com
            bash .github/scripts/list_tobuild.sh

      - name: Output list of up to 90 packages to build
        id: matrix
        run: |
          mkdir -p /tmp
          head -n90 tobuild.txt > /tmp/pkglist
          # Output it as json parsable list "['pkg1', 'pkg2']"
          echo pkglist=$(echo "['$(cat /tmp/pkglist |  paste -d, -s | sed s/,/\',\'/g)']") >> $GITHUB_OUTPUT
          # Remove first 90 liunes from to build
          sed '1,90d' tobuild.txt > /tmp/newtobuild

      - name: Set token depending on whether a new workflow is needed
        id: tokenlist
        run: |
          # PAT will trigger a push workflow, GITHUB_TOKEN won't
          # Trigger a new workflow if tobuild is not empty
          if [ -s tobuild.txt ]; then TOK=${{secrets.PAT}}; else TOK=${{secrets.GITHUB_TOKEN}}; fi
          echo tok=$(echo "$TOK") >> $GITHUB_OUTPUT

      - name: Checkout with new token
        uses: actions/checkout@v3
        with:
          token: ${{ steps.tokenlist.outputs.tok }}
          persist-credentials: true

      - name: Update list
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            cp /tmp/newtobuild tobuild.txt
            mkdir -p logs/dispatchlists
            mkdir -p lists
            cp /tmp/pkglist logs/dispatchlists/${{ steps.uniq.outputs.time }}_pkglist
            cat /tmp/pkglist | xargs -i sed -i 's/readytobuild/claimed/g' "lists/{}"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add lists
            git add logs
            git add tobuild.txt
            git commit -m "Updating tobuild list"
            git push

  build:
    needs: getlistformatrix
    strategy:
      fail-fast: false
      matrix:
        pkg: ${{fromJson(needs.getlistformatrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    container:
      image: bioconductor/bioconductor_docker:RELEASE_3_16
    steps:
      - uses: actions/checkout@v3

      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: build (${{ matrix.pkg }})
          per_page: 100

      - name: Push run_id
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            git config user.name github-actions
            git config user.email github-actions@github.com
            PKG="${{ matrix.pkg }}"
            sed -i 's/claimed/building/g' "lists/$PKG"
            mkdir -p logs/run_ids/rstudio-binaries
            echo "${{ steps.jobs.outputs.html_url }}" >> logs/run_ids/rstudio-binaries/$PKG
            # Add workflow URL as backup, in case above failed
            echo "${{ github.repository }}/actions/runs/${{ github.run_id }}" >> logs/run_ids/rstudio-binaries/$PKG
            git add logs
            git commit -m "push run_id container $PKG"
            git push

      - name: Get R, OS, and Bioc versions
        id: versions
        run: |
          echo os=$(Rscript -e 'sessionInfo()$running') >> $GITHUB_OUTPUT
          echo r=$(Rscript -e 'R.Version()$version.string') >> $GITHUB_OUTPUT
          echo bioc=$(Rscript -e 'BiocManager::version()') >> $GITHUB_OUTPUT
          echo runstart=${{ hashFiles('runstarttime') }} >> $GITHUB_OUTPUT
          echo library=$(echo "$(pwd)/built/") >> $GITHUB_OUTPUT

      - name: Get deps list
        id: deps
        run: |
          PKG=${{ matrix.pkg }}
          sed -n "/^    \"$PKG\"/,/^    \"/p" alldeps.json | grep '^        "' | awk -F'"' '{print $2}' > /tmp/deps
          sed -n "/^    \"$PKG\"/,/^    \"/p" directdeps.json | grep '^        "' | awk -F'"' '{print $2}' > /tmp/directdeps

      - name: Get dependency artifacts 
        run: |
          # Install gh cli, jq, time
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && sudo apt update && sudo apt install gh jq time -y
          PKG=${{ matrix.pkg }}
          cat /tmp/directdeps | xargs -i bash .github/scripts/download_artifact.sh {} ${{ steps.versions.outputs.library }} ${{github.repository}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Build claimed package
        id: pkgbuild
        run: |
          PKG="${{ matrix.pkg }}"
          mkdir -p /tmp/logs/times/rstudio-binary/
          (time bash .github/scripts/build_package.sh ${{ steps.versions.outputs.library }} $PKG ) 2>&1 | tee /tmp/logs/times/rstudio-binary/$PKG
        continue-on-error: true

      - name: Get tar name
        id: tar
        run: |
          echo pkg=$(ls /tmp/tars/ | grep ${{matrix.pkg}} | sed 's#/tmp/tars/##g') >> $GITHUB_OUTPUT
          # make tar of library
          cd $(dirname ${{ steps.versions.outputs.library }}) && tar -zcvf "${{ matrix.pkg }}.tar.gz" "$(basename ${{ steps.versions.outputs.library }})"
          echo name=$(echo "$(dirname ${{ steps.versions.outputs.library }})/${{ matrix.pkg }}.tar.gz") >> $GITHUB_OUTPUT
        if: steps.pkgbuild.outcome=='success'


      - name: Save size and time
        run: |
          mkdir -p /tmp/logs/sizes/rstudio-binaries/libraries
          mkdir -p /tmp/logs/sizes/rstudio-binaries/binaries
          wc -c "${{steps.tar.outputs.name}}" > /tmp/logs/sizes/rstudio-binaries/libraries/${{ matrix.pkg }}
          wc -c "/tmp/tars/${{steps.tar.outputs.pkg}}" > /tmp/logs/sizes/rstudio-binaries/binaries/${{ matrix.pkg }}


      - name: Push failed before exit
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            PKG="${{ matrix.pkg }}"
            git pull origin main || git reset --hard origin/main
            mkdir -p lists/failed
            mkdir -p logs/sizes/rstudio-binaries/libraries
            mkdir -p logs/sizes/rstudio-binaries/binaries
            cp /tmp/$PKG lists/failed/$PKG;
            cp -r /tmp/logs logs
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add lists
            git add logs
            git commit -m "Marked failed $PKG"
            git push
        if: steps.pkgbuild.outcome=='failure'

      - name: Exit on failure
        run: exit 1
        if: steps.pkgbuild.outcome=='failure'

      - uses: actions/upload-artifact@v3
        with:
          name: "artifact-${{ matrix.pkg }}"
          path: ${{steps.tar.outputs.name}}

      - name: Install rclone
        shell: bash
        run: "sudo -v ; curl https://rclone.org/install.sh | sudo bash"

      - name: Add rclone conf file
        run: |
          echo "$RCLONE_CONF" > ~/.rclone.conf
        env:
          RCLONE_CONF: ${{secrets.RCLONE_CONF}}

      - name: Rclone push package
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          shell: bash
          command: |
            set -x
            # Push binary
            rclone copy /tmp/tars/${{steps.tar.outputs.pkg}} js2:/gha-build/rstudio-binaries/$(cat runstarttime)/ -vvvvvv
            # Push copy of library
            rclone copy ${{steps.tar.outputs.name}} js2:/gha-build/running/$(cat runstarttime)/ -vvvvvv

      - name: Rclone mark as pushed
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git config user.name github-actions
            git config user.email github-actions@github.com
            cp -r /tmp/logs logs
            git add logs
            if bash -c "bash .github/scripts/rclone_push.sh ${{ matrix.pkg }} ${{steps.tar.outputs.pkg}} 2>&1 | grep -i 'error'"; then exit 1; else 
            echo "Marked pushed ${{ matrix.pkg }}"; fi
